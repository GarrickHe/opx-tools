#!/usr/bin/python
# Copyright (c) 2018 Dell Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
# LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
# FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
#
# See the Apache Version 2.0 License for specific language governing
# permissions and limitations under the License.

from cps_utils import *
import argparse
import cps_object
import nas_os_if_utils as if_utl
from opx_tools.opx_config_utils import *

actions_map = { 1:"Drop", 
                2:"Forward", 
                3:"Trap", 
                4:"Log",
                5:"Source Drop" }
                
def _exit(level, Error):
    print "opx-show-mac: %s" % Error
    sys.exit(level)

def _show_1q_mac(args, parser):

    get_output = []
    summary = []

    if not args.mac or not args.vlan : 
        parser.print_help()
        _exit(1, "Required parameters are missing : mac/vlan")

    cps_utils.add_attr_type("base-mac/query/mac-address", "mac")
    get_req_obj = CPSObject('base-mac/query',
                    data= { "mac-address" : args.mac, "vlan" : args.vlan, })

    if cps.get([get_req_obj.get()], get_output):
       for i in get_output:
           get_req_obj = cps_object.CPSObject(obj=i)
           _mac = get_req_obj.get_attr_data('base-mac/query/mac-address')
           _vlan = get_req_obj.get_attr_data('base-mac/query/vlan')
           _ifindex = get_req_obj.get_attr_data('base-mac/query/ifindex')
           _ifname = if_utl.ifindex_to_name (_ifindex)
           _actions = get_req_obj.get_attr_data('base-mac/query/actions')
           _static = get_req_obj.get_attr_data('base-mac/query/static')

           summary+= [[ _mac,
                        str(_vlan),
                        str(_ifindex),
                        _ifname,
                        actions_map[_actions],
                        "True" if _static else "False"
                         ]]

       print_summary(['MAC Addr', 'VLAN', 'IF-Index', 'Port', 'Actions', 'Static'],
                     summary,
                     [None, None, None, None, None, None, None]
                    )

    else:
       _exit(2, "No Entry is found.")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Tool for FDB show utility')
    parser.add_argument('--mac', required='true', help=" MAC address")
    parser.add_argument('--vlan', required='true', type = int,  help = 'vlan id')

    args = parser.parse_args()

    _show_1q_mac(args,parser)

