#!/usr/bin/python

# Copyright (c) 2018 Dell Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
# LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
# FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
#
# See the Apache Version 2.0 License for specific language governing
# permissions and limitations under the License.

import argparse
import sys

from opx_tools.opx_config_utils import *


resp = cps_get('target', 'base-switch/switching-entities/switching-entity', {})
if resp is None or len(resp) != 1:
    print  >> sys.stderr, 'Failed to get switch data'
    sys.exit(1)
target_attrs = resp[0]['data'].keys()

hash_alg_map = {'xor': 1, 'crc': 2, 'random': 3 }

hash_fields_map = {'src-ip':       1,
                   'dest-ip':      2,
                   'vlan-id':      3,
                   'ip-protocol':  4,
                   'ethertype':    5,
                   'l4-src-port':  6,
                   'l4-dest-port': 7,
                   'src-mac':      8,
                   'dest-mac':     9,
                   'in-port':      10
                   }

class Hash_Fields_Action(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("nargs not allowed")
        super(Hash_Fields_Action, self).__init__(option_strings, dest, **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        if not chk_set(values, set(hash_fields_map.keys())):
            parser.error('Invalid hash field(s)')
        setattr(namespace, self.dest, values.split(','))

class Default_Vlan_Id_Action(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("nargs not allowed")
        super(Default_Vlan_Id_Action, self).__init__(option_strings, dest, **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        if values < 1 or values > 4095:
            parser.error('Invalid default VLAN id')
        setattr(namespace, self.dest, values)

class Mac_Addr_Action(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("nargs not allowed")
        super(Mac_Addr_Action, self).__init__(option_strings, dest, **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        ok = True
        while True:
            li = values.split(':')
            if len(li) != 6:
                ok = False
                break
            for x in li:
                try:
                    if int(x, 16) > 255:
                        ok = False
                        break
                except:
                    ok = False
                    break
            break
        if not ok:
            parser.error('Invalid MAC address')
        setattr(namespace, self.dest, ''.join(li))

class Mac_Age_Timer_Action(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("nargs not allowed")
        super(Mac_Age_Timer_Action, self).__init__(option_strings, dest, **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        if values < 0:
            parser.error('Invalid MAC ageing time')
        setattr(namespace, self.dest, values)
        
class Counter_Refresh_Action(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("nargs not allowed")
        super(Counter_Refresh_Action, self).__init__(option_strings, dest, **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        if values < 0:
            parser.error('Invalid statistics counter refresh interval')
        setattr(namespace, self.dest, values)
        
class Switch_Profile_Action(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("nargs not allowed")
        super(Switch_Profile_Action, self).__init__(option_strings, dest, **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        x = None
        resp = cps_get('target', 'base-switch/switching-entities/switching-entity', {})
        if resp is not None and len(resp) == 1:
            x = cps_attr_data_get(resp[0], 'base-switch/switching-entities/switching-entity/supported-profiles')
        if x is None:
            print  >> sys.stderr, 'Failed to get switch data'
            sys.exit(1)
        if values not in x:
            parser.error('Invalid profile')
        setattr(namespace, self.dest, values)
        
        
attrs = [Struct(option='--switch-mode',
                map={'cut-through': 1, 'store-and-forward': 2 },
                help='Switch forwarding mode',
	        cps_attr='base-switch/switching-entities/switching-entity/switch-mode'
                ),
         Struct(option='--lag-hash-alg',
                map=hash_alg_map,
                help='LAG hash algorithm',
	        cps_attr='base-switch/switching-entities/switching-entity/lag-hash-algorithm'
                ),
         Struct(option='--lag-hash-seed',
                help='LAG hash algorithm seed value',
                metavar='SEED',
                type=int,
	        cps_attr='base-switch/switching-entities/switching-entity/lag-hash-seed-value'
                ),
         Struct(option='--lag-hash-fields',
                help='Frame fields for LAG hash; comma-separated list of ' + ','.join(hash_fields_map.keys()),
                metavar='FIELDS',
                action=Hash_Fields_Action,
	        cps_attr='base-switch/switching-entities/switching-entity/lag-hash-fields'
                ),
         Struct(option='--ecmp-hash-alg',
                map=hash_alg_map,
                help='ECMP hash algorithm',
	        cps_attr='base-switch/switching-entities/switching-entity/ecmp-hash-algorithm'
                ),
         Struct(option='--ecmp-hash-seed',
                help='ECMP hash algorithm seed value',
                metavar='SEED',
                type=int,
	        cps_attr='base-switch/switching-entities/switching-entity/ecmp-hash-seed-value'
                ),
         Struct(option='--ecmp-hash-fields',
                help='Frame fields for ECMP hash; comma-separated list of ' + ','.join(hash_fields_map.keys()),
                metavar='FIELDS',
                action=Hash_Fields_Action,
	        cps_attr='base-switch/switching-entities/switching-entity/ecmp-hash-fields'
                ),
         Struct(option='--mac-age-time',
                help='Ageing timeout for MAC addresses',
                metavar='TIME',
                type=int,
                action=Mac_Age_Timer_Action,
	        cps_attr='base-switch/switching-entities/switching-entity/mac-age-timer'
                ),
         Struct(option='--default-vlan-id',
                help='VLAN id assigned to untagged frames',
                metavar='VID',
                type=int,
                action=Default_Vlan_Id_Action,
	        cps_attr='base-switch/switching-entities/switching-entity/default-vlan-id'
                ),
         Struct(option='--disable-default-vlan',
                help='',
                map={'off': 0, 'on': 1},
	        cps_attr='base-switch/switching-entities/switching-entity/disable-default-vlan'
                ),
         Struct(option='--default-mac-addr',
                help='Default MAC address',
                metavar='MACADDR',
                action=Mac_Addr_Action,
	        cps_attr='base-switch/switching-entities/switching-entity/default-mac-address'
                ),
         Struct(option='--counter-refresh',
                help='Time interval for refreshing statistics counters',
                metavar='TIME',
                type=int,
                action=Counter_Refresh_Action,
	        cps_attr='base-switch/switching-entities/switching-entity/counter-refresh-interval'
                ),
         Struct(option='--uft-mode',
                help='Unified forwarding table mode',
                map={'default': 1, 'scaled-L2': 2, 'scaled-L3-routes': 3, 'scaled-L3-hosts': 4},
	        cps_attr='base-switch/switching-entities/switching-entity/uft-mode'
                )         
         ]

db_attrs = [Struct(option='--next-profile',
                   help='Switch profile used at next boot',
                   metavar='PROFILE',
                   action=Switch_Profile_Action,
	           cps_attr='base-switch/switching-entities/switching-entity/switch-profile',
                   )
           ]

parser = argparse.ArgumentParser(description='Set interface configuration')
for x in attrs + db_attrs:
    if x.cps_attr not in target_attrs:
        continue
    extra = {}
    if hasattr(x, 'metavar'):
        extra['metavar'] = x.metavar
    if hasattr(x, 'map'):
        extra['choices'] = x.map.keys()
    if hasattr(x, 'action'):
        extra['action'] = x.action
    parser.add_argument(x.option, help=x.help, type=getattr(x, 'type', str), **extra)
args = parser.parse_args()

d = {'base-switch/switching-entities/switching-entity/switch-id': 0}
for x in attrs:
    a = getattr(args, x.option[2:].replace('-', '_'), None)
    if a is None:
        continue
    d[x.cps_attr] = x.map[a] if hasattr(x, 'map') else a

if not cps_set('base-switch/switching-entities/switching-entity', 'target', d):
    print  >> sys.stderr, 'Failed to set switch configuration'

d = {'base-switch/switching-entities/switching-entity/switch-id': 0}
for x in db_attrs:
    a = getattr(args, x.option[2:].replace('-', '_'), None)
    if a is None:
        continue
    d[x.cps_attr] = x.map[a] if hasattr(x, 'map') else a

cps_obj = cps_object.CPSObject('base-switch/switching-entities/switching-entity',
                               qual='target',
                               data=d
                               )
cps.set_ownership_type(cps_obj.get_key(), 'db')
cps_obj.set_property('db', True)
if not cps_utils.CPSTransaction([('set', cps_obj.get())]).commit():
    print  >> sys.stderr, 'Failed to set switch configuration'
